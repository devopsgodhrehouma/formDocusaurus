-------------------------------------------------------------------
05 - Section 5  - Git pour mettre de l‚ÄôOrdre dans vos Versions
-------------------------------------------------------------------

Installer git  ==> https://phoenixnap.com/kb/how-to-install-git-windows


***********************************************************************************
üóÇÔ∏è Partie 1 : Pourquoi utiliser Git pour g√©rer les versions ?
***********************************************************************************

Lorsque vous travaillez avec l'IA g√©n√©rative et les prompts, il est crucial de pouvoir revenir en arri√®re si quelque chose ne fonctionne pas comme pr√©vu. Voici pourquoi Git est essentiel :

- Un prompt mal con√ßu peut g√©n√©rer du code qui casse votre application Docusaurus
- L'IA peut produire des modifications non d√©sir√©es dans vos fichiers
- Vous pouvez vouloir comparer diff√©rentes versions de votre documentation



***********************************************************************************
üóÇÔ∏è Partie 2 : Comment utiliser Git pour sauvegarder vos versions
***********************************************************************************

1. Initialisez Git dans votre projet (si ce n'est pas d√©j√† fait) :
git init
git status 



2. Configurez votre nom d'utilisateur et votre adresse e-mail :
git config --global user.email "you@example.com" 
git config --global user.name "Your Name"
git config --local user.email "you@example.com"
git config --local user.name "Your Name"

- par exemple :
git status 
git config --global user.email "formationselasticaws@gmail.com" 
git config --global user.name "SkillFlowCoach"
git config --local user.email "formationselasticaws@gmail.com"
git config --local user.name "SkillFlowCoach"



3. Ajoutez vos fichiers √† la zone de sauvegarde :
git add .


4. Committez vos modifications :
git commit -m "Version 1 - version initiale"



5. Vous pouvez maintenant revenir en arri√®re si n√©cessaire :
git log 
git checkout <commit_id>




***********************************************************************************
üóÇÔ∏è  Partie 3: effectuer le push de votre projet sur github
***********************************************************************************

git add remote origin <adresse_github>
git remote -v
git branch -M main
git push origin main




***********************************************************************************
üóÇÔ∏è Partie 4 : effectuer des modifications sur votre projet sur github 
et tester la restauration (backup) d'une version ant√©rieure suite √† une erreur
***********************************************************************************

Par exemple : 



4.1 - √©crire un nouveau prompt pour changer le titre de la page d'accueil
‚úçÔ∏è Prompt pour modifier le titre de la page d'accueil
------------------------------------------------------------------------------------
Je souhaite modifier le titre de la page d'accueil de mon site Docusaurus.
Voici mes besoins :

1. Modifier le titre principal pour qu'il soit : "Formation Compl√®te Docusaurus & IA"
2. Ajouter un sous-titre attractif qui mentionne l'utilisation de l'IA g√©n√©rative
3. Garder le style et la mise en page actuels
4. S'assurer que les modifications sont compatibles avec le th√®me Docusaurus

Le fichier √† modifier se trouve dans : src/pages/index.js
Merci de proposer les modifications n√©cessaires tout en pr√©servant la structure existante.


git status 
git add .
git commit -m "Version 2 - Modification du titre de la page d'accueil"
git push origin main
git log



4.2 -  √©crire un nouveau prompt pour casser le site accidentellement et tester le backup avec git checkout
------------------------------------------------------------------------------------
‚úçÔ∏è Prompt pour tout casser le site et tester le checkout
------------------------------------------------------------------------------------
Je souhaite faire des modifications majeures sur mon site Docusaurus pour tester le syst√®me de versioning Git.
Voici les changements √† effectuer :

1. Supprimer tous les styles CSS personnalis√©s
2. Changer toutes les couleurs en rouge vif (#FF0000)
3. Modifier la taille de police de tous les textes √† 72px
4. Remplacer tous les titres par "ERREUR 404"
5. Supprimer toutes les images et les remplacer par des GIFs anim√©s
6. Ajouter des animations clignotantes partout
7. Changer la disposition de tous les √©l√©ments en position: absolute

Le but est de cr√©er un chaos visuel complet pour ensuite pouvoir tester la restauration avec git checkout.

Fichiers √† modifier :
- src/css/custom.css
- src/pages/index.js
- src/theme/Layout.js
- tous les fichiers de style

üíÄ ‚õî üö´ ‚ö†Ô∏è Ces modifications vont compl√®tement d√©truire l'apparence du site, parfait pour tester le syst√®me de versioning ! ‚ö†Ô∏è üö´ ‚õî üíÄ



4.3 -  tester le backup avec git checkout
------------------------------------------------------------------------------------
git log  (Ceci vous donne la liste des commits, c'est le commit_id que vous cherchez)
git checkout <commit_id>
testez le site et constatez que tout est remis en ordre. Votre backup est op√©rationnel.
npm start ou npx docusaurus start



4.4 -  valider le backup 
------------------------------------------------------------------------------------

git log 



commit 49be295c5f80b553686f5e8bc8ab41d3f47d55e8 (HEAD -> main)
Author: SkillFlowCoach <formationselasticaws@gmail.com>
Date:   Sun Jan 12 15:02:04 2025 -0500

    Version3 - version chaotique
	


commit 4fd72bb625638c75ee5b503934ec874381f1c374
Author: SkillFlowCoach <formationselasticaws@gmail.com>
Date:   Sun Jan 12 14:57:19 2025 -0500

    Version2 -modification du titre
	
	
	
	
commit 33fbadad16af2b792b501a5ec17cf04be27bce83 (sauvegarde-version, haythem)
Author: SkillFlowCoach <formationselasticaws@gmail.com>
Date:   Sun Jan 12 14:54:05 2025 -0500

    Version 1 - version initiale
(base)





git checkout 33fbadad16af2b792b501a5ec17cf04be27bce83
git switch -c branche2
git branch 

==> testez le site 
git switch main ==> testez le site 
git switch branche2 ==> testez le site 
git switch main ==> testez le site 









Solution 1 pour supprimer les derni√®res modifications  (1 seule branche)
git log --oneline -n 1
git checkout 33fbadad16af2b792b501a5ec17cf04be27bce83
git branch -f main HEAD
git switch main


#### Explications : **Forcer la branche principale √† pointer sur cette version**
Si tu veux que `main` devienne exactement la version actuelle :





#### Solution 2 : **Cr√©er une branche temporaire puis fusionner**
Si tu veux √©viter des conflits, fais ceci :

git switch -c sauvegarde-version
git switch main
git merge sauvegarde-version

Puis supprime la branche de sauvegarde si tout est bon :

git branch -d sauvegarde-version





Finalement , on doit faire ceci pour envoyer les mises √† jour.

---

### Envoyer la mise √† jour vers le d√©p√¥t distant :**
Si tu travailles avec un d√©p√¥t distant (comme GitHub, GitLab) :

git push origin main --force

‚ö†Ô∏è **Attention :** L‚Äôoption `--force` r√©√©crit l‚Äôhistorique sur le d√©p√¥t distant. Utilise-la si tu es s√ªr.

---

### **R√©sum√© rapide :**
- **`git branch -f main HEAD`** force la branche `main` √† pointer sur le commit actuel.
- Ensuite, fais `git switch main` pour retourner sur `main`.
- **Pousse avec `git push --force`** si tu veux rendre cela permanent sur le d√©p√¥t distant.






-----------------------------------
Bonnes pratiques :
-----------------------------------


- Garder les  versions stable sur votre branche main 
- Chaque fois que vous voulez d√©velopper une nouvelle fonctionnalit√© risqu√©e (cr√©er un chatboot par exemple),
je dois cr√©er une autre branche et travailler sur cette branche. 
- Une fois que je suis satisfait des r√©sultats je fais un merge avec la branche principale.
 





- Je vous propose un exemple de workflow Git.
- Ce script suppose que vous avez d√©j√† initialis√© un d√©p√¥t Git :

```bash
# Assurez-vous d'√™tre sur la branche principale (main)
git checkout main

# Mettez √† jour la branche principale pour avoir les derni√®res modifications
git pull origin main

# Cr√©ez une nouvelle branche pour la fonctionnalit√© risqu√©e (exemple : cr√©er un chatbot)
git checkout -b feature/chatbot

# Travaillez sur la nouvelle branche
# (Ajoutez ou modifiez vos fichiers, puis enregistrez les changements)
git add .
git commit -m "Ajout des fichiers pour le chatbot"

# Une fois satisfait des r√©sultats, basculez √† nouveau sur la branche principale
git checkout main

# Mettez √† jour la branche principale avec les derniers changements distants (par s√©curit√©)
git pull origin main

# Fusionnez la branche "feature/chatbot" avec la branche principale
git merge feature/chatbot

# (Facultatif) Supprimez la branche feature/chatbot si elle n'est plus n√©cessaire
git branch -d feature/chatbot

# Poussez les changements vers le d√©p√¥t distant
git push origin main
```

### Explications
1. **`git checkout -b feature/chatbot`** : Cr√©e une nouvelle branche √† partir de la branche principale pour travailler sur la nouvelle fonctionnalit√©.
2. **`git add` et `git commit`** : Enregistrez vos changements sur la branche de fonctionnalit√©.
3. **`git merge feature/chatbot`** : Fusionne les changements approuv√©s dans la branche principale.
4. **`git branch -d feature/chatbot`** : Supprime la branche locale apr√®s la fusion, si elle n'est plus n√©cessaire.
5. **`git push origin main`** : Poussez vos changements locaux sur la branche principale distante.

Ce workflow garantit que la branche principale reste stable et que les fonctionnalit√©s risqu√©es sont d√©velopp√©es isol√©ment jusqu'√† validation






***********************************************************************************
üóÇÔ∏è Partie 5 : Comment comparer diff√©rentes versions de votre documentation
***********************************************************************************

1. Listez les commits :
git log


2. Comparez deux commits :
git diff <commit_id1> <commit_id2>






***********************************************************************************
üóÇÔ∏è Partie 6 : R√©sum√© comment restaurer une version sp√©cifique
***********************************************************************************

1. Listez les commits :
git log

2. comparer deux commits
git diff <commit_id1> <commit_id2>

3. Restaurez une version sp√©cifique :
git checkout <commit_id>



